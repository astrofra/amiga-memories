<NML=1.0>

<PSM="
	vec3	dn = normalize(n_mtx_mul(u_vtl, vec4(frag_viewpos, 1.0)).xyz);

			if	((dn.z > 0.0) && (dn.x > -dn.z) && (dn.x < dn.z) && (dn.y > -dn.z) && (dn.y < dn.z))
			pcf = ComputePCF(frag_viewpos, psm_0_projection_matrix, psm, 1.0);
	else	if	((dn.z < 0.0) && (dn.x > dn.z) && (dn.x < -dn.z) && (dn.y > dn.z) && (dn.y < -dn.z))
			pcf = ComputePCF(frag_viewpos, psm_2_projection_matrix, psm, 1.0);

	else	if	((dn.x > 0.0) && (dn.y > -dn.x) && (dn.y < dn.x) && (dn.z > -dn.x) && (dn.z < dn.x))
			pcf = ComputePCF(frag_viewpos, psm_1_projection_matrix, psm, 1.0);
	else	if	((dn.x < 0.0) && (dn.y > dn.x) && (dn.y < -dn.x) && (dn.z > dn.x) && (dn.z < -dn.x))
			pcf = ComputePCF(frag_viewpos, psm_3_projection_matrix, psm, 1.0);

	else	if	((dn.y > 0.0) && (dn.x > -dn.y) && (dn.x < dn.y) && (dn.z > -dn.y) && (dn.z < dn.y))
			pcf = ComputePCF(frag_viewpos, psm_5_projection_matrix, psm, 1.0);
	else	if	((dn.y < 0.0) && (dn.x > dn.y) && (dn.x < -dn.y) && (dn.z > dn.y) && (dn.z < -dn.y))
			pcf = ComputePCF(frag_viewpos, psm_4_projection_matrix, psm, 1.0);
">

<PSSM=
	<4Split="
			if	(frag_viewpos.z < pssm_0_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_0_projection_matrix, pssm, 1.0);
	else	if	(frag_viewpos.z < pssm_1_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_1_projection_matrix, pssm, (pssm_1_slice_distance - pssm_0_slice_distance) / pssm_0_slice_distance);
	else	if	(frag_viewpos.z < pssm_2_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_2_projection_matrix, pssm, (pssm_2_slice_distance - pssm_1_slice_distance) / pssm_0_slice_distance);
	else	if	(frag_viewpos.z < pssm_3_slice_distance)
	{
		pcf = ComputePCF(frag_viewpos, pssm_3_projection_matrix, pssm, (pssm_3_slice_distance - pssm_2_slice_distance) / pssm_0_slice_distance);

		float ramp_len = (pssm_3_slice_distance - pssm_2_slice_distance) * 0.25;
		float ramp_k = clamp((frag_viewpos.z - (pssm_3_slice_distance - ramp_len)) / ramp_len, 0.0, 1.0);
		pcf = pcf * (1.0 - ramp_k) + ramp_k;
	}
	">
	<3Split="
			if	(frag_viewpos.z < pssm_0_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_0_projection_matrix, pssm, 1.0);
	else	if	(frag_viewpos.z < pssm_1_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_1_projection_matrix, pssm, (pssm_1_slice_distance - pssm_0_slice_distance) / pssm_0_slice_distance);
	else	if	(frag_viewpos.z < pssm_2_slice_distance)
	{
		pcf = ComputePCF(frag_viewpos, pssm_2_projection_matrix, pssm, (pssm_2_slice_distance - pssm_1_slice_distance) / pssm_0_slice_distance);

		float ramp_len = (pssm_2_slice_distance - pssm_1_slice_distance) * 0.25;
		float ramp_k = clamp((frag_viewpos.z - (pssm_2_slice_distance - ramp_len)) / ramp_len, 0.0, 1.0);
		pcf = pcf * (1.0 - ramp_k) + ramp_k;
	}
	">
	<2Split="
			if	(frag_viewpos.z < pssm_0_slice_distance)
			pcf = ComputePCF(frag_viewpos, pssm_0_projection_matrix, pssm, 1.0);
	else	if	(frag_viewpos.z < pssm_1_slice_distance)
	{
		pcf = ComputePCF(frag_viewpos, pssm_1_projection_matrix, pssm, (pssm_1_slice_distance - pssm_0_slice_distance) / pssm_0_slice_distance);

		float ramp_len = (pssm_1_slice_distance - pssm_0_slice_distance) * 0.25;
		float ramp_k = clamp((frag_viewpos.z - (pssm_1_slice_distance - ramp_len)) / ramp_len, 0.0, 1.0);
		pcf = pcf * (1.0 - ramp_k) + ramp_k;
	}
	">
>

<PCF=
	<5x5GaussianDithered="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow tsampler, float k)
	{
		vec4 noise = vec4(0.0, 0.0, 0.0, 0.0);

		vec4 flp = n_mtx_mul(pjm, vec4(fvp - vec3(0.0, 0.0, u_lsb), 1.0));
		vec3 pjb = flp.xyz / flp.w;

		#define	_SamplePCF(u, v, dt, w) { vec3 offset = pjb + vec3((vec2(u, v) + dt) * u_iss / k, 0.0); pcf_tap += shadow2D(tsampler, offset).r * w; }

		float pcf_tap = 0.0;

		_SamplePCF(-1.0, -1.0, noise.xy, 1.0)
		_SamplePCF(-0.5, -1.0, noise.yx, 4.0)
		_SamplePCF( 0.0, -1.0, noise.xz, 7.0)
		_SamplePCF( 0.5, -1.0, noise.zx, 4.0)
		_SamplePCF( 1.0, -1.0, noise.zy, 1.0)

		_SamplePCF(-1.0, -0.5, noise.xw, 4.0)
		_SamplePCF(-0.5, -0.5, noise.wx, 16.0)
		_SamplePCF( 0.0, -0.5, noise.wy, 26.0)
		_SamplePCF( 0.5, -0.5, noise.yw, 16.0)
		_SamplePCF( 1.0, -0.5, noise.xw, 4.0)

		_SamplePCF(-1.0,  0.0, noise.xz, 7.0)
		_SamplePCF(-0.5,  0.0, noise.zy, 26.0)
		_SamplePCF( 0.0,  0.0, noise.xw, 41.0)
		_SamplePCF( 0.5,  0.0, noise.zw, 26.0)
		_SamplePCF( 1.0,  0.0, noise.wy, 7.0)

		_SamplePCF(-1.0,  0.5, noise.xy, 4.0)
		_SamplePCF(-0.5,  0.5, noise.yx, 16.0)
		_SamplePCF( 0.0,  0.5, noise.xw, 24.0)
		_SamplePCF( 0.5,  0.5, noise.wy, 16.0)
		_SamplePCF( 1.0,  0.5, noise.zy, 4.0)

		_SamplePCF(-1.0,  1.0, noise.zy, 1.0)
		_SamplePCF(-0.5,  1.0, noise.xy, 4.0)
		_SamplePCF( 0.0,  1.0, noise.xw, 7.0)
		_SamplePCF( 0.5,  1.0, noise.wz, 4.0)
		_SamplePCF( 1.0,  1.0, noise.zw, 1.0)

		return pcf_tap / 273.0;
	}
	">
	<3x3GaussianDithered="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow tsampler, float k)
	{
		vec4 noise = vec4(0.0, 0.0, 0.0, 0.0);

		vec4 flp = n_mtx_mul(pjm, vec4(fvp - vec3(0.0, 0.0, u_lsb), 1.0));
		vec3 pjb = flp.xyz / flp.w;

		#define	_SamplePCF(u, v, dt, w) { vec3 offset = pjb + vec3((vec2(u, v) + dt) * u_iss / k, 0.0); pcf_tap += shadow2D(tsampler, offset).r * w; }

		float pcf_tap = 0.0;

		_SamplePCF(-1.0, -1.0, noise.wx, 16.0)
		_SamplePCF( 0.0, -1.0, noise.wy, 26.0)
		_SamplePCF( 1.0, -1.0, noise.yw, 16.0)

		_SamplePCF(-1.0,  0.0, noise.zy, 26.0)
		_SamplePCF( 0.0,  0.0, noise.xw, 41.0)
		_SamplePCF( 1.0,  0.0, noise.zw, 26.0)

		_SamplePCF(-1.0,  1.0, noise.yx, 16.0)
		_SamplePCF( 0.0,  1.0, noise.xw, 24.0)
		_SamplePCF( 1.0,  1.0, noise.wy, 16.0)

		return pcf_tap / 207.0;
	}
	">
	<4x4="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow tsampler, float k)
	{
		vec4 flp = n_mtx_mul(pjm, vec4(fvp - vec3(0.0, 0.0, u_lsb), 1.0));
		vec3 pjb = flp.xyz / flp.w;

		#define	_SamplePCF(u, v, w) { vec3 offset = pjb + vec3(u, v, 0.0) * u_iss / k; pcf_tap += shadow2D(tsampler, offset).r * w; }

		float pcf_tap = 0.0;

		_SamplePCF(-1.0,	-1.0, 1.0)
		_SamplePCF(-0.333,	-1.0, 1.0)
		_SamplePCF( 0.333,	-1.0, 1.0)
		_SamplePCF( 1.0,	-1.0, 1.0)

		_SamplePCF(-1.0,	-0.333, 1.0)
		_SamplePCF(-0.333,	-0.333, 1.0)
		_SamplePCF( 0.333,	-0.333, 1.0)
		_SamplePCF( 1.0,	-0.333, 1.0)

		_SamplePCF(-1.0,	 0.333, 1.0)
		_SamplePCF(-0.333,	 0.333, 1.0)
		_SamplePCF( 0.333,	 0.333, 1.0)
		_SamplePCF( 1.0,	 0.333, 1.0)

		_SamplePCF(-1.0,	 1.0, 1.0)
		_SamplePCF(-0.333,	 1.0, 1.0)
		_SamplePCF( 0.333,	 1.0, 1.0)
		_SamplePCF( 1.0,	 1.0, 1.0)

		return pcf_tap / 16.0;
	}
	">
	<3x3="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow tsampler, float k)
	{
		vec4 flp = n_mtx_mul(pjm, vec4(fvp - vec3(0.0, 0.0, u_lsb), 1.0));
		vec3 pjb = flp.xyz / flp.w;

		#define	_SamplePCF(u, v, w) { vec3 offset = pjb + vec3(u, v, 0.0) * u_iss / k; pcf_tap += shadow2D(tsampler, offset).r * w; }

		float pcf_tap = 0.0;

		_SamplePCF(-1.0, -1.0, 1.0)
		_SamplePCF( 0.0, -1.0, 1.0)
		_SamplePCF( 1.0, -1.0, 1.0)

		_SamplePCF(-1.0,  0.0, 1.0)
		_SamplePCF( 0.0,  0.0, 1.0)
		_SamplePCF( 1.0,  0.0, 1.0)

		_SamplePCF(-1.0,  1.0, 1.0)
		_SamplePCF( 0.0,  1.0, 1.0)
		_SamplePCF( 1.0,  1.0, 1.0)

		return pcf_tap / 9.0;
	}
	">
	<2x2="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow tsampler, float k)
	{
		vec4 flp = n_mtx_mul(pjm, vec4(fvp - vec3(0.0, 0.0, u_lsb), 1.0));
		vec3 pjb = flp.xyz / flp.w;

		#define	_SamplePCF(u, v, w) { vec3 offset = pjb + vec3(u, v, 0.0) * u_iss / k; pcf_tap += shadow2D(tsampler, offset).r * w; }

		float pcf_tap = 0.0;

		_SamplePCF(-1.0, -1.0, 1.0)
		_SamplePCF( 1.0, -1.0, 1.0)

		_SamplePCF(-1.0,  1.0, 1.0)
		_SamplePCF( 1.0,  1.0, 1.0)

		return pcf_tap / 4.0;
	}
	">
	<1x1="
	float	ComputePCF(vec3 fvp, mat4 pjm, sampler2DShadow tsampler, float k)
	{
		vec4 flp = n_mtx_mul(pjm, vec4(fvp - vec3(0.0, 0.0, u_lsb), 1.0));
		vec3 pjb = flp.xyz / flp.w;
		return shadow2D(tsampler, pjb).r;
	}
	">
>

<UnpackGBuffer=
	<Integer="
	vec4 UnpackNormalDepth(vec2 UV)
	{
		vec4 pck = texture2D(gbuffer0, UV);
		vec2 nxy = pck.xy * 2.0 - 1.0;

		float z = dot(pck.wz, vec2(1.0, 256.0)) * 1024.0 / 256.0;
		return vec4(nxy.x, nxy.y, -sqrt(1.0 - (nxy.x * nxy.x + nxy.y * nxy.y)), z);
	}
	">
	<Float="
	vec4 UnpackNormalDepth(vec2 UV) { return texture2D(gbuffer0, UV); }
	">
>
