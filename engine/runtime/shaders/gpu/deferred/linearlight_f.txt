#(UnpackNormalDepth)

%main%
{
	vec2	UV = %in.fragcoord%.xy * u_ibs;
	vec4	norm_dpth = UnpackNormalDepth(UV);

	if	(norm_dpth.z == 0.0)
		%out.color% = vec4(0.0, 0.0, 0.0, 1.0);

	else
	{
		vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + u_vdo);

		// Normal in viewmodel space.
		vec3	normal = norm_dpth.xyz;

		// Light diffuse contribution.
		float	idiff = max(-dot(u_lvd, normal), 0.0);

		// Light specular contribution.
		vec4	spec_glos = texture2D(gbuffer2, UV);
		vec3	e = reflect(normalize(frag_viewpos), normal);
		float	ispec = pow(max(-dot(u_lvd, normalize(e)), 0.0), spec_glos.w * 96.0);

		// Full contribution.
		vec4	diff_alpha = texture2D(gbuffer1, UV);
		%out.color% = vec4(diff_alpha.rgb * u_diffc * idiff + spec_glos.rgb * u_specc * ispec, 1.0);
	}
}
