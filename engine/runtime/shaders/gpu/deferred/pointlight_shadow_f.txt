#(ComputePCF)
#(UnpackNormalDepth)

float	EvaluatePCF(vec3 frag_viewpos, vec3 dn)
{
	float	pcf = 1.0;

			if	((dn.z > 0.0) && (dn.x > -dn.z) && (dn.x < dn.z) && (dn.y > -dn.z) && (dn.y < dn.z))
			pcf = ComputePCF(frag_viewpos, psm_0_projection_matrix, psm, 1.0);
	else	if	((dn.z < 0.0) && (dn.x > dn.z) && (dn.x < -dn.z) && (dn.y > dn.z) && (dn.y < -dn.z))
			pcf = ComputePCF(frag_viewpos, psm_2_projection_matrix, psm, 1.0);

	else	if	((dn.x > 0.0) && (dn.y > -dn.x) && (dn.y < dn.x) && (dn.z > -dn.x) && (dn.z < dn.x))
			pcf = ComputePCF(frag_viewpos, psm_1_projection_matrix, psm, 1.0);
	else	if	((dn.x < 0.0) && (dn.y > dn.x) && (dn.y < -dn.x) && (dn.z > dn.x) && (dn.z < -dn.x))
			pcf = ComputePCF(frag_viewpos, psm_3_projection_matrix, psm, 1.0);

	else	if	((dn.y > 0.0) && (dn.x > -dn.y) && (dn.x < dn.y) && (dn.z > -dn.y) && (dn.z < dn.y))
			pcf = ComputePCF(frag_viewpos, psm_5_projection_matrix, psm, 1.0);
	else	if	((dn.y < 0.0) && (dn.x > dn.y) && (dn.x < -dn.y) && (dn.z > dn.y) && (dn.z < -dn.y))
			pcf = ComputePCF(frag_viewpos, psm_4_projection_matrix, psm, 1.0);

	return pcf;
}

%main%
{
	vec2	UV = %in.fragcoord%.xy * u_ibs;

	vec4	norm_dpth = UnpackNormalDepth(UV);
	if	(norm_dpth.z == 0.0)
		%out.color% = vec4(0.0, 0.0, 0.0, 1.0);

	else
	{
		vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + u_vdo);

		vec3	dn = normalize(n_mtx_mul(u_vtl, vec4(frag_viewpos, 1.0)).xyz);
		float	pcf = EvaluatePCF(frag_viewpos, dn);

		if	(pcf > 0.0)
		{
			// Normal in viewmodel space.
			vec3	normal = norm_dpth.xyz;
		
			// Light diffuse contribution.
			vec3	dt = frag_viewpos - u_lvp;
			float	dl = length(dt);
			dt = dt / dl;
			float	atten = u_lr > 0.0 ? max(1.0 - dl / u_lr, 0.0) : 1.0;
			float	idiff = max(-dot(dt, normal) * atten, 0.0);
		
			// Light specular contribution.
			vec4	spec_glos = texture2D(gbuffer2, UV);
			vec3	e = reflect(normalize(frag_viewpos), normal);
			float	ispec = pow(max(-dot(dt, normalize(e)), 0.0), spec_glos.w * 96.0) * atten;

			// Full contribution.
			vec4	diff_alpha = texture2D(gbuffer1, UV);
			%out.color% = vec4(mix(u_shadowc, diff_alpha.rgb * u_diffc * idiff + spec_glos.rgb * u_specc * ispec, pcf), 1.0);
		}
		else
			%out.color% = vec4(u_shadowc, 1.0);
	}
}